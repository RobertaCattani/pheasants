

If you use scrm in a publication, please cite the following publication:

Paul R. Staab, Sha Zhu, Dirk Metzler and Gerton Lunter. scrm: efficiently simulating long sequences using the approximated coalescent with recombination. Bioinformatics (2015) 31 (10): 1680-1682. doi:10.1093/bioinformatics/btu861.

citation: 

Paul R. Staab, Sha Zhu, Dirk Metzler and Gerton Lunter. scrm: efficiently simulating long sequences using the approximated coalescent with recombination. Bioinformatics (2015) 31 (10): 1680-1682. doi:10.1093/bioinformatics/btu861

The arguments for calling scrm are

scrm <nhap> <nrep> [...]
where nhap is the total number of haplotypes (in all populations and at all times) that are simulated at each locus, and nrep is the number of independent loci that will be produced. The [...] is an optional placeholder for an arbitrary number of command line flags described below.




1. install scrrm
then example code

```
set.seed(789)
#set.seed uses a single integer argument to set as many seeds as are required. It is intended as a simple way to get quite different seeds by specifying small integer arguments, and also as a way to get valid seed sets for the more complicated methods (especially "Mersenne-Twister" and "Knuth-TAOCP"). There is no guarantee that different values of seed will seed the RNG differently, although any exceptions would be extremely rare. If called with seed = NULL it re-initializes (see ‘Note’) as if no seed had yet been set.
#The random numbers are the same, and they would continue to be the same no matter how far out in the sequence we went.
#Tip. Use the set.seed function when running simulations to ensure all results, figures, etc are reproducible.

# 5 Chromosomes with 100 bases each with recombination and mutation
sum_stats <- scrm('5 1 -r 3.1 100 -t 1.5 -T -L') 
#1 locus??
#`t 1.5: mutation rate of 1.5
# -r 3.1 - recomb rate of 3.1`
#-L: Print the TMRCA and the local tree length for each segment (behaves different to ms). Both values are scaled in coalescent time units, e.g. in 4 * N0 generations.
#-t < $\theta$ >: Set the mutation rate to θ=4N0u, where u is the neutral mutation rate per locus. If this options is given, scrm generates the segregating sites output.
#-T: Print the local genealogies in newick format.
#-r <R> <L>: Set the recombination rate to R = 4N0r and the length of all loci to L base pairs. r is expected number of recombinations on the locus per generation.
#-l <l>: Use approximation rather than simulating the exact ARG. Within a sliding window of length l base pairs all linkage information is considered when building the genealogy. To positions outside of this window, some linkage is ignored. Setting l=0 produces the SMC’ and l=-1 deactivates the approximation. Since v1.6.0, it’s also possible to specify the window’s length in number of recombinations. To do so, use -l <x>r, where x is the number of recombinations (e.g. -l 100r for a window spanning 100 recombinations). Also starting with version 1.6.0 approximation is turned on by default using a conservative window length of 500 recombinations. For most applications, it should be fine to reduce this value to 100 - 250 recombinations if runtime is a critical factor.
#-I <npop> <s1> ... <sn> [<M>]: Use an island model with npop populations, where s1 to sn haplotypes are sampled from population 1 to n, respectively. Optionally assume a symmetric migration rate of M.

str(sum_stats)
# Simulate the site frequency spectrum at 3 loci. For each locus
# 10 Chromosomes of 1Mb length are sampled from two populations with
# migration inbetween.
scrm('10 3 -r 400 1000000 -l 100000 -I 2 4 6 0.5 -t 300 -oSFS')$sfs
#10 CS, 3 loci recom of 400. 100,0000 length (1 mil bases),  aprroximaitng 100,000?.  then 2pops, 4-6 haplotypes sampled from pop 1 to 2, migration rate of 0.5, mutation rate of 300?

 what <- scrm('1000 1 -r 0 1000 -t 1.33*10^-9 -eN 0 500 -eN 50 5 -eG 50 0.096478 -eN 100 1000 -eG 100 0', file="test1")
 
 what2 <- scrm('1000 1 -t 1.33*10^-9 -eN 0 500 -eN 50 5 -eG 50 0.096478 -eN 100 1000 -eG 100 0', file="test2")
 
#do one and calc stats on this, shuffle it + Read it in as structure (then you say every individual is coded by 2 lines, so it groups them)
#no of cS is indivs in effective pop x2 bc this is the number of haplotypes. (time 0: <nhap>)

#with this know that its 500 indivs, name them as populations, but they're just the repetitions. 
#run through the steps and then they wil help get the loop

write.csv(what, file = "my_data.csv")

mydata <- read.csv("/Users/bobbiecattani/Birds/my_data.csv")
summary(mydata)

  library(hierfstat)
basic.stats(mydata)
#-oSFS: Print the site frequency spectrum. Requires that the mutation rate θ is given with the ‘-t’ option.


```

scrm('80 5 -r 0 100 -t 4.6*10^-9 ')
test1 <- scrm('80 5 -r 0 100 -t 4.6*10^-9 ')

library(adegenet)
read.loci (test1)

scrm  <nhap> <nreps>
read.structure("test1.stru")

#exponential growth rate for 5 founder pop (Ns) and 500 end pop (n0) over 50 generations (50 years) = 0.096478
scrm('80 10 -t 1.33*10^-9 -eN 0 500 -eN 50 5 -eG 50 0.096478 -eN 100 1000 -eG 100 0', file="test")
#output for all the segregating sites: for first locus (segsites:30) - would be 30 snps in the window; its comparable to VCF bc its just the vairant sites, so have some idea of snps per number of base pairs. 
#thse are haplotypes which are effective popsize. 
#80 haplotypes which means 40 indivs. - simulates 80 CS but we're intepretting it as across the population - so make it 160 for 80 CS. 
#blocks of data where each one is a locus, what is the benefit of doing multiple loci? bc essentially you're going to take first 2 lines of each block of code, so almost like the loci would be the CS. 


test <- scrm('1000 1 -t 1.33*10^-9 -eN 0 500 -eN 50 5 -eG 50 0.096478 -eN 100 1000 -eG 100 0', file="test.stru")
#do one and calc stats on this, shuffle it + Read it in as structure (then you say every individual is coded by 2 lines, so it groups them)
#no of cS is indivs in effective pop x2 bc this is the number of haplotypes. (time 0: <nhap>)

#with this know that its 500 indivs, name them as populations, but they're just the repetitions. 
#run through the steps and then they wil help get the loop





0.999532279502071
