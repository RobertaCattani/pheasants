library(scrm)
library(stringr)
library(locfit)
library(Rfast)
library(dplyr)
library(Rfast)


nhap=40 #2*number of samples i.e. number of pheasante in real data* 2 (bc diploid) 
#2 seperate simulations, one for malaysian (20 indv) and mountain (22 indv)
nrep=1000 #min 100, 1000 if fast enough
#1 is number of simulations within scrm. 
bp=1000000 #base pairs - maybe more bc birds have 1gb roughly??
N0=500 #effective population ??? census size, mention in report!
T1=50/(4*(N0)) #time at bottleneck
N1=2 #pop at bottlneck (2,4,6,8,10,20,40 - 7 different ones.)
N2=150000 #ancestral pop, 
G=-(1/T1)*log(N1/(N0)) #exponential growth rate after bottleneck #needs to be natural log (not log 10)
a2=0 #exponential/constant growth rate in ancestral pop
theta0=4*(N0)*(1.33*10^-9)*bp #with 1.33*10^-9 = mutationrate per yer (=generation) per locus
p=N1/N2 #pop proportion at bottleneck (bottleneck/ancestral pop)
recom = (4*N0*0.03)  

Fh = matrix(ncol = nrep,nrow=nhap/2) #make columns for each iteration, with the number of rows = nbr of inividuals
Fis = matrix(ncol = nrep,nrow=nhap/2)
#Fh calculated with only minor allele frequency (see Keller et al.)
G.EHet= matrix(nrow = nrep) #Global heterozygosity (Rita's formula)
G.EHom = matrix(nrow=nrep)
for(a in 1:nrep) #loop it nrep times: this is loop:
{
  command = paste(nhap, 1, "-t",theta0, "-G",G, "-eN",T1,p, "-eG",T1,a2, "-r",recom,bp, "-print-model", "--print-model")
  
  scrm.data<-scrm(command)
  #write.table(scrm.data, file = paste("tabledata",a, ".txt",sep = "")) #write a table for each loop and paste file in directory
  scrm.df=as.data.frame(scrm.data) #coerce to class data.frame
  if(dim(scrm.df)[2]==0){ #bc low mutation rate sometimes no variants; to avoid this, tell loop to make G.EHet and Fh equal 0 if the dimensions of the columns [2] of scrm.df are 0 (bc if dim = 0 that means no diversity which means there is no heterozygosity, only homozygosity)
    
    G.EHet[a] <- 0 #conditions
    Fh[,a] = 0
    Fis[,a] = 1
    G.EHom[a] = 1
  }
  
  else {   #if the dim ??? 0 then just rin loop normally
    
    shuffled.data <- scrm.df[sample(nrow(scrm.df)),] #shuffle the rows
    shuffled.matrix <- data.matrix(shuffled.data, rownames.force = NA) #Convert a Data Frame to a Numeric Matrix
    diploid.data <- rowsum(shuffled.matrix, as.integer(gl(nrow(shuffled.matrix), 2, nrow(shuffled.matrix)))) #combine 2 rows into 1 (haploid into diploid)
    named.diploid <- ifelse(diploid.data %% 2 == 0,"Hom","Het") #if dividable by 2 and remainder 0, then name "Hom", if not name "Het"
    
    
    n.loci <- ncol(shuffled.matrix) #number of loci (i.e. segsites)
    
    Hom_per_row = numeric() #Homozygosity per row by counting the "Hom"s
    for (i in 1:nhap/2)
    {
      Hom_per_row[i] = sum(str_count(named.diploid[i,], "Hom"))/n.loci #need to divide it by number of loci. 
    }
    
    
    # hom00 <- sum(str_count(diploid.data, "0")) #nbr of homozygotes 00
    # hom11 <- sum(str_count(diploid.data, "2")) #nbr of homozygotes 11
    # het01 <- sum(str_count(diploid.data, "1")) #nbr of heterozygotes 01
    
    
    M1_per_col = numeric() #Homozygosity per column
    M0_per_col = numeric()
    maf = numeric() #allele frequency
    EHom = numeric() #Expected Homozygosity
    for (b in 1:n.loci)
    {
      M1_per_col[b] = sum(str_count(shuffled.matrix[,b], "1")) #count all the 1 (=mutation, whereas 0 are the ancestral state) for each segsite
      M0_per_col[b] = sum(str_count(shuffled.matrix[,b], "0"))
      #count 1s and 0s and whichever is bigger, use this to calculate the next one. 
      if (M1_per_col[b] >= M0_per_col[b]) #want to use the less frequent one
      {
        maf[b]=M0_per_col[b]/nhap #number of hom per column, divided by total number of rows (2*individuals), so maf per loci
        EHom[b]=1-2*maf[b]*(1-maf[b])  
      }
      else{ 
        maf[b]=M1_per_col[b]/nhap #number of hom per column, divided by total number of rows (2*individuals), so maf per loci
        EHom[b]=1-2*maf[b]*(1-maf[b])  
      }
    }
    
    EHom
    SEHom = mean(EHom) #mean of expected homozygosity 
    # SOHom = hom00 + hom11  #sum of observed homozygosity
    Fh[,a]= (Hom_per_row-SEHom)/(n.loci-SEHom) #Fh as proxy for inbreeding
    
    
    fis.Mut_per_col = numeric() #number of allele 1 per column
    fis.maf = numeric() #major allele frequency ratio = number of 1 divided by total number of alleles = p (because ratio)
    fis.Min.mut_per_col=numeric() ##number of allele 0 per column
    fis.min.af = numeric() #minor allele frequency ratio = number of 0 divided by total number of alleles =p
    fis.total.allele.freq=numeric() #sum of p^2 (individual observed homozygosity)
    FISEHom = numeric()
    for (i in 1:n.loci)
    {
      fis.Mut_per_col[i] = sum(str_count(shuffled.matrix[,i], "1")) #count all the 1 (=mutation, whereas 0 are the ancestral state) for each segsite
      fis.maf[i]=fis.Mut_per_col[i]/nhap #number of hom per column, divided by total number of rows (2*individuals), so maf per loci
      fis.Min.mut_per_col[i] = sum(str_count(shuffled.matrix[,i], "0")) #count all the 0 (=mutation, whereas 0 are the ancestral state) for each segsite
      fis.min.af[i] = fis.Min.mut_per_col[i]/nhap
      fis.total.allele.freq[i]=  (fis.maf[i])^2+ (fis.min.af[i])^2 #sum of p^2
      FISEHom[i]=1-2*fis.total.allele.freq[i]*(1-fis.total.allele.freq[i])  
      FISHOM = mean(FISEHom)
    Fis[,a] = 1-(Hom_per_row)/FISHOM
  } 
 
    
  }
  
}

Fh.means=colmeans(Fh)
Fh.medians=colMedians(Fh)
Fismean= colmeans(Fis)
fis.med=colMedians(Fis)


FH.sub.2 = subset(Fh.means, Fh.means!=0)
FH.MED.2 =subset(Fh.medians, Fh.medians!=0)
FH.rm.2 = 1000 - length(FH.sub.2)
Fis.2 = subset(Fismean, Fismean!=0)
fis.med.2 = subset(fis.med, fis.med!=0)

Globalhet.2 = subset(G.EHet, G.EHet[,1]!=0)
Globalhom.2= subset(G.EHom, G.EHom[,1]!=1)
rm.het.2 = 1000 - length(Globalhet.2)
