using PCAdapt
https://cran.r-project.org/web/packages/pcadapt/vignettes/pcadapt.html

install.packages("pcadapt")
library(pcadapt)

#reading the genotype data: converting it into the BED format#
path_to_file <-"/Users/bobbiecattani/Birds/vcftools/filename.final.recode.vcf"
filename <- read.pcadapt(path_to_file, type = "vcf")

#The pcadapt function performs two successive tasks. First, PCA is performed on the centered and scaled genotype matrix. The second stage consists in computing test statistics and p-values based on the correlations between SNPs and the first K principal components (PCs). To run the function pcadapt, the user should specify the output returned by the function read.pcadapt and the number K of principal components to compute. To choose K, principal component analysis should first be performed with a large enough number of principal components (e.g. K=20).#
x <- pcadapt(input = filename, K = 20) 
#NB: by default, data are assumed to be diploid. To specify the ploidy, use the argument ploidy (ploidy=2 for diploid species and ploidy = 1 for haploid species) in the pcadapt function.#
#The ‘scree plot’ displays in decreasing order the percentage of variance explained by each PC. Up to a constant, it corresponds to the eigenvalues in decreasing order. The ideal pattern in a scree plot is a steep curve followed by a bend and a straight line. The eigenvalues that correspond to random variation lie on a straight line whereas the ones that correspond to population structure lie on a steep curve. We recommend to keep PCs that correspond to eigenvalues to the left of the straight line (Cattell’s rule). In the provided example, K = 2 is the optimal choice for K. The plot function displays a scree plot:#
plot(x, option = "screeplot")

#By default, the number of principal components shown in the scree plot is K, but it can be reduced via the argument K.#

plot(x, option = "screeplot", K = 10)

#probably use the first 5 or 3 - as long as you capture most of the variance as ok#, we;d expect 1-3 to explain variance between sp + the rest within: they become relevant the more complex analysis you get#

#IMPORT  table data: #
 
 poplist.csv <- read.csv("/Users/bobbiecattani/Birds/pheasantpops.csv", header=TRUE)
head(poplist.csv)
poplist.names <-poplist.csv[,7]
str(poplist.names)
plot(x, option = "scores", pop = poplist.names)
                    
  ##make sure you use cSV to read in - didn't work properly with importing the excel file. 
  
  
  
  See what scores + loadings mean. 
 . 
                    
